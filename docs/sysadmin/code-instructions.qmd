```{r}
#| include: false
#| eval: true

source('R/appdown.r')
```

# Coding Procedures

## Adding a New Option {-}

Do the following to add a new option both to the program and its projects:

- Add the variable and `GetXXX()/SetXXX()` functions to `r file_path(c("src", "app", "readability_app_options.h"))`
- Add an XML constant tag for aforementioned variable in `r file_path(c("src", "app", "readability_app_options.h"))`
- Add reset logic for the variable in `ResetSettings()` (in `r file_path(c("src", "app", "readability_app_options.cpp"))`).\
  (This should be the same value as the initializer value in the header file.)
- Add logic to read value in `LoadOptionsFile()` (in `r file_path(c("src", "app", "readability_app_options.cpp"))`)
- Add logic to save value in `SaveOptionsFile()` (in `r file_path(c("src", "app", "readability_app_options.cpp"))`)

If the option is used in projects also, do the following:

- Add the variable and `GetXXX()/SetXXX()` functions to `r file_path(c("src", "projects", "base_project.h"))` if a base-level value that subprojects in a batch would need.\
  UI and graph related options should be in `r file_path(c("src", "projects", "base_project_doc.h"))` instead.
- Initialize variable with value from `ReadabilityAppOptions` in the `BaseProject` (base-level options) or `BaseProjectDoc` constructor\
  (`r file_path(c("src", "projects", "base_project.cpp"))` or `r file_path(c("src", "projects", "base_project_doc.cpp"))`)
- Add copy operation for variable in `BaseProject::CopySettings()` (base-level options) or\
  `BaseProjectDoc::CopyDocumentLevelSettings()`
- Add reading logic to `BaseProjectDoc::LoadSettingsFile()`
- Add write logic to `BaseProjectDoc::FormatProjectSettings()`

Finally:

- Add variable to `r file_path(c("src", "ui", "dialogs", "tools_options_dlg.h"))` (if not a value shown in a property grid)
  - If a value in a property grid, then add a function that returns the string for the value in the property grid; this will be used also as a look-up key
- Add variable initialization from `ReadabilityAppOptions` or project to `ToolsOptionsDlg`'s constructor
  - Note that if the option is in a property grid, then there is no direct variable and instead you use a string label to get and set the values from the property grid.
    Instead, the default value for this field is loaded in `ToolsOptionsDlg::CreateControls()`.
- Add change watching logic for variable to `ToolsOptionsDlg::HaveXXXOptionsChanged()` if related to project settings (note there are different versions of these functions for each type of feature)
- Add saving logic to `ToolsOptionsDlg::SaveOptions()` (and related `ToolsOptionsDlg::SaveProjectXXXOptions()` function, if applicable)
- Attach variable to interface in `ToolsOptionsDlg::CreateControls()`
- Use the variable in the program where applicable
- Add it to the documentation

If wanting to edit this option from the ribbon:

- If a menu item, add it to a menu in `BaseProjectView::CreateChildFrame()` in\
  `r file_path(c("src", "projects", "base_project_view.cpp"))`
  - If it is a checkable menu, add logic for setting the proper check state in\
    `BaseProjectView::Present()`
- If a ribbon button (not in the project area of the ribbon), add logic for it to be added to the ribbon in `BatchProjectView::OnItemSelected()` (`r file_path(c("src", "projects", "batch_project_view.cpp"))`) and\
  `ProjectView::OnItemSelected()` (`r file_path(c("src", "projects", "standard_project_view.cpp"))`)
- If a ribbon button in the project section, add it there in `ReadabilityApp::CreateRibbon()`\
  (`r file_path(c("src", "app", "readability_app.cpp"))`)
- Add a `wxEVT_MENU`/`wxEVT_RIBBONBUTTONBAR_CLICKED` event handler for the menu/ribbon button option in `r file_path(c("src", "projects", "base_project_view.h"))` and `r file_path(c("src", "projects", "base_project_view.cpp"))`
  - If relevant only to standard or batch projects, then put it in the\
  "batch_project_view"/"standard_project_view" files instead
- Map the event handler in `BaseProjectView`'s constructor (or `BatchProjectView`'s and `ProjectView`'s constructors)

## Adding a New Option to a Graph's Ribbon

For options specific to a graph that needs to be added to the ribbon:

- If this graph doesn't have its own custom ribbon panel, then:
  - Add a `wxWindowID` constant for the graph's ribbon panel to\
    `r file_path(c("src", "app", "readability_app.h"))`
- Add logic for adding the new option button to the graph's panel in\
  `ReadabilityApp::CreateRibbon()`\
  (`r file_path(c("src", "app", "readability_app.cpp"))`)
- Add logic for using the option to the graph's function in\
  `r file_path(c("src", "projects", "standard_project_doc.cpp"))`\
  (for readability graphs, this will be its `AddXXX()` function)
- Add logic for using the new option in the graph's `DisplayXXX()` function in\
  `r file_path(c("src", "projects", "batch_project_doc.cpp"))`
- If not already present, create a `wxRibbonPanel*` variable from calling\
  `hideEditPanel()` with the graph's ribbon panel ID in\
  `BatchProjectView::OnItemSelected()`\
  (`r file_path(c("src", "projects", "batch_project_view.cpp"))`).
  - In the same function, (if not present) add code to show the graph's panel
    when the selected item is of that graph's type.\
    Also, add code to toggle the button's state (if applicable)
- Repeat the aforementioned steps, but in\
  `r file_path(c("src", "projects", "standard_project_view.cpp"))`
- If not already present, add a function to\
  `r file_path(c("src", "projects", "project_frame.cpp"))`\
  to handle the new ribbon button being clicked. Refer to\
  `ProjectDocChildFrame::OnShowcaseKeyItems()` as an example

## Adding a New Test {-#add-a-new-test}

- Add the actual function to `r file_path(c("src", "readability", "english_readability.h"))` (or other file if a different language). (This only applies to linear regression based tests with a formula, not tests that calculate their values graphically [e.g., Fry].)
- Add its definition to `BaseProject::InitializeStandardReadabilityTests()`
- Add internal name constant to `r file_path(c("src", "results_format", "readability_messages.h/cpp"))`. This will be a string ID that is used throughout the program, documentation, and resources to identify the test.
- Add its `AddXXXTest()` function to `r file_path(c("src", "projects", "base_project.cpp"))`
- If a graphical test (e.g., Fry), then also do the following:
  - The `AddXXXTest()` function must be virtual and derived in `r file_path(c("src", "projects", "standard_project_doc.h"))` and `r file_path(c("src", "projects", "standard_project_doc.cpp"))` also
  - If a graphical test that’s a supplement to a test (that already has its own `AddXXXTest()` function), then call the graphical `AddXXXTest()` from the test’s original `AddXXXTest()` function in `r file_path(c("src", "projects", "base_project.cpp"))`
  - Handle its exclusion in `ProjectDoc::DisplayReadabilityGraphs()`
  - Add its `GetXXXLabel()` function in `r file_path(c("src", "projects", "base_project_view.h"))`
  - Define its graph window ID in `r file_path(c("src", "projects", "base_project_view.h"))`
  - Add aforementioned window ID into the `GraphType` enum in\
    `r file_path(c("resources", "scripting", "rs-constants.lua"))`
  - Add to `GraphType`'s list of values in `r file_path(c("resources", "scripting", "rs-libraries.api"))`
  - Handle that aforementioned window ID in `ProjectView::OnEditGraphOptions()`,\
    `ProjectView::OnHyperlinkClicked()`, `ProjectView::OnItemSelected()`, `MainFrame::OnHelpContents()`,\
    and `BatchProjectDoc::DisplayReadabilityGraphs()`
  - Add `Set/GetXXXGraph()` functions to `r file_path(c("src", "projects", "batch_project_view.h"))`
  - Show/hide window in `BatchProjectDoc::DisplayScores()`
  - Load results in `BatchProjectDoc::LoadScores()` if graph handles scoring instead of the formula (e.g., Fry)
  - Add its icon loading to `MainFrame::MainFrame()`
  - Connect the sidebar item to the icon in `ProjectView::UpdateSideBarIcons()` and `BatchProjectView::UpdateSideBarIcons()`
  - Add a blank graph for it in `MainFrame::OnBlankGraph()` and `MainFrame::FillMenuWithBlankGraphs()`
- Add this `AddXXXTest()` function to standard test function pointer map table in `BaseProject::OnItemSelected()`
- If an index test, add its score formatting logic to `BatchProjectView::UpdateStatAndTestPanes()`
- Document it in the help:
  - Add a topic for it in `r file_path(c("docs", "readability-studio-manual", "[language]"))`, where "[language]" is the language that the test is meant for
  - Add it to the proper dataset in `r file_path(c("docs", "readability-studio-manual", "data"))`\
    (e.g., "EnglishTests.txt")
  - If a graphical test, automate making a screenshot of the graph for the help
- Add an icon to `r file_path(c("resources", "images", "tests"))` in SVG format with the same name as the test's string ID

## Adding a New Familiar Word List {-}

The following documents how to add a familiar word list (used by a test, such as Dale-Chall) to the program.
These are extra steps in addendum to [adding a new test](#add-a-new-test).

::: {.notesection data-latex=""}
This applies to full words lists (e.g., Dale-Chall), not supplements such as Stocker's Catholic words.
:::

- Create a word list file and add to the resources (`r file_path(c("resources", "words", "word-lists"))`).\
  (This should be a single column text file.)
- Add a `word_list` object to `BaseProject` (in `r file_path(c("src", "projects", "base_project.h"))`)
- Load the text file into aforementioned `word_list` in `ReadabilityApp::LoadWordLists()`
- Add a check that the list is sorted in `ReadabilityApp::VerifyWordLists()`

### Adding Statistics Fields {-}

- Add unique and total unfamiliar word statistic fields to `BaseProject`
- Add XML constants in `r file_path(c("src", "app", "readability_app_options.h"))` and\
  `r file_path(c("src", "app", "readability_app_options.cpp"))` for these unique and total values
- Add `GetXXX()/SetXXX()` functions in `BaseProject` for these fields
- Zero out these values in `BaseProject`’s constructor and initializers
- Zero out these values in `BaseProject::LoadHardWords()`
- In `BaseProject::LoadHardWords()`, create an `is_familiar_word` object connected up to the word list. (An example is the `isDCWord` object.)
  - Use it in this function to tabulate the number of total and unique unfamiliar words. 
- Format and display these values in `BaseProject::FormatStatisticsInfo()`
- Load these values in `ProjectDoc::LoadMetaFile()`
- Save these values in `ProjectDoc::OnSaveDocument()`
- Add unfamiliar label function to `r file_path(c("src", "projects", "base_project_view.h"))`

### Adding Support for the List Window {-}

- Add a page ID for the list in `r file_path(c("src", "projects", "base_project_view.h"))`
- Add this ID to the `ListType` enumeration in `r file_path(c("resources", "scripting", "rs-constants.lua"))`
- Add hard word list data provider to `BaseProject`
- Initialize the data provider in `BaseProject`’s constructor
- Delete the data provider in `BaseProject`’s destructor
- In `BaseProject::LoadHardWords()`, delete all the items in the data provider, and then resize it to the size of the word map
- In the aforementioned unfamiliar word handler in `BaseProject::LoadHardWords()` (e.g., `isDCWord`) , fill the data provider with the unfamiliar words
- In `ProjectDoc::DisplayWordsBreakdown()`, add logic to add a page for the data provider and show it in a list control. (Should involved showing or hiding these windows if the test is included.)
- Add `EVT_LIST_ITEM_ACTIVATED` message mapping for list ID to `ProjectView::OnListDblClick()`
- Add handler for ID to jump to the respective highlighted text window in `ProjectView::OnListDblClick()` (see following instructions for highlighted test window)

### Adding Support for the Text Window {-}

- Add a page ID for the text window in `r file_path(c("src", "projects", "base_project_view.h"))`
- Add this ID to the `HighlightedReportType` enumeration in `r file_path(c("resources", "scripting", "rs-constants.lua"))`
- Add a `wxFormattedTextCtrl` window in `r file_path(c("src", "projects", "standard_project_doc.h"))`
- Add unfamiliar function object (based on `IsNotFamiliarWordWithHighlighting`) to\
  `ProjectDoc::DisplayHighlightedText()`. (An example is `isNotDCWord`.)
- Add a legend line for the word list in text window in `ProjectDoc::DisplayHighlightedText()`
- Add the legend’s line length to `maxLegendSize`
- Add a legend (including the aforementioned legend line)
- Load and fill the text window in `ProjectDoc::DisplayHighlightedText()`
- Hide or show the text window in `ProjectDoc::DisplayHighlightedText()` based on whether its test is included in the project
- Also hide or show the text window in `ProjectDoc::UpdateHighlightedTextWindows()`

### Remaining Standard Project Steps {-}

- Add hyperlink handler (from formatted stats) to `ProjectView::OnHyperlinkClicked()`
- Add bar for unfamiliar words to bar chart in `ProjectDoc::DisplayWordCharts()`
- Add cases for both the list and text page IDs in `MainFrame::OnHelpContents()` to go to the help topic "reviewing-word-breakdowns.html"

### Batch Project {-}

- Increase the size of the hard word list data provider in `BatchProjectDoc::LoadHardWords()`
- Add word stats into data provider in `BatchProjectDoc::LoadHardWords()`
- Insert columns into hard word list in `BatchProjectDoc::DisplayHardWords()`

### Custom Test Support (Low-level) {-}

- Add word list to `custom_test` (`r file_path(c("src", "readability", "custom_readability_test.h"))`) class using an `is_familiar_word` object
- Add flag for including that list, along with getter and setter functions
  - These should be initialized to `false`
- In `custom_test`'s constructor, set the `is_familiar_word` object to use the test's prescribed proper noun and number logic
- Add logic for `operator==`, `is_using_familiar_words()`, `reset()`, `is_word_familiar_any_included_list()`, `is_word_familiar_all_included_list()`

### Custom Test Support (Higher-level) {-}

- Add XML string constant for saving word list flag for custom tests to\
  `r file_path(c("src", "app", "readability_app_options.h"))` (e.g., `XML_INCLUDE_HARRIS_JACOBSON_LIST`)
- Update any calls to `BaseProjectDoc::AddGlobalCustomReadabilityTest()` to include the word list and respective flag (the `CustomReadabilityTest` typedef passed to this will need these passed to its constructor)
- Add save and read logic for flag in `r file_path(c("src", "projects", "base_project_doc.cpp"))`
- Add save and read logic for settings file (`ReadabilityAppOptions::LoadOptionsFile()` and `ReadabilityAppOptions::ReadabilityAppOptions::SaveOptionsFile()`)
- Add logic to `ShowCustomTestDialogFamiliarWords()` and `SetCustomTestDialogIncludedLists()` in `r file_path(c("src", "lua_scripting", "lua_screenshot.cpp"))`
- Set and read this flag from `EditCustomTest` in `r file_path(c("src", "app", "readability_app.cpp"))`
- Add logic to `OnAddCustomTest()` in `r file_path(c("src", "app", "readability_app.cpp"))`
- In `AddCustomReadabilityTest()` (in `r file_path(c("src", "projects", "base_project.cpp"))`), mention the inclusion of this list in the test's description

### Custom Test Dialog {-}

- Add flag to custom test dialog
- Add the flag to the `UpdateOptions()` function
- Initialize the flag to false
- Add a checkbox ID for the flag
- Add a checkbox to the custom test dialog
- Add a message mapping for the new checkbox ID
- Update calls in `OnAddCustomTest()` and `OnEditCustomTest()` to set and get the flags to and from this dialog

### Custom Test Formula {-}

- Add a `GetCustomXXXSignature()` function in `r file_path(c("src", "test_helpers", "readability_formula_parser.h"))` that returns the label `"CustomXXX()"` (where `XXX` is the name of the word-list test)
- Add a `static double CustomXXX(const te_expr* context)` function in\
  `r file_path(c("src", "test_helpers", "readability_formula_parser.cpp"))` that handles a custom version of the original test.\
  This function is what gets mapped to `"CustomXXX()."` (Refer to `CustomNewDaleChall()` as an example.)
- Map this function in `ReadabilityFormulaParser::ReadabilityFormulaParser()`
- Add the new `` function to `m_customFamiliarWords` in `CustomTestDlg::Create()`
- Add handling logic for this function to `CustomTestDlg::ValidateFormula()`
- Add a menu option to create a new test based on `CustomXXX()`
  - Add a menu event mapping for adding a new test using this new formula in\
    `r file_path(c("src", "app", "readability_app.cpp"))`
  - Add handling logic to `MainFrame::OnAddCustomTest()`
- If the original word test has custom logic for how to handle text exclusion:
  - Add a bit for it in `CustomReadabilityTestInterface` in `r file_path(c("src", "projects", "base_project.h"))`
  - Handle the text exclusion logic in `BaseProject::LoadHardWords()`
  - In the custom test dialog, warn the user if they select exclusion/proper noun/number options that differ from the test

### Word List Dialog {-}

- Add page and list IDs for the word list to `r file_path(c("src", "dialogs", "word_list_dlg.h"))`
- Handle the list being selected in `WordListDlg::GetActiveList()`
- Create the list by calling `AddSingleColumnPage()` in `WordListDlg::CreateControls()`

::: {.notesection data-latex=""}
If it is a more complex word list (with categories, like Dolch), then that will need its own logic.
:::

- Add a menu ID for the word list and map it to `MainFrame::OnWordListByPage`\
  (`r file_path(c("src", "app", "readability_app.cpp"))`)
- Add the word list to the menu in `MainFrame::FillMenuWithWordList()`
- Handle the menu option for the word list in `MainFrame::OnWordListByPage()`

## Adding a New Custom-Test Formula Function {-}

- Add a static function wrapper to the function you wish to call from the program in\
  `r file_path(c("src", "test_helpers", "readability_formula_parser.cpp"))` (e.g., `HardFogWordCount`)
- Map the function (and shortcut, if applicable) in `ReadabilityFormulaParser::ReadabilityFormulaParser()`
- Document the function in `CustomTestDlg::Create()`
- Document the function in `r file_path(c("docs", "readability-studio-manual", "custom-tests-and-bundles.qmd"))`

## Adding a New Stipple Shape {-}

When a new stipple shape is added to the `r file_path("Wisteria-Dataviz")` submodule, it can be included in this program.

- Add a mapping of the displayable name and internal *Wisteria* key in `m_shapeMap` in\
  `r file_path(c("src", "app", "readability_app.cpp"))`
- In the API manual (`r file_path("readability-studio-api")`, add the new shape to the\
  "SetStippleShape.qmd" topics. (This will need to be the internal keys, not the displayable name.)

## Adding a New Color Scheme {-}

When a new color scheme is added to the `r file_path("Wisteria-Dataviz")`  submodule, it can be included in this program.

- Add a mapping of the displayable name and internal *Wisteria* key in `m_colorSchemeMap` in\
  `r file_path(c("src", "app", "readability_app.cpp"))`. (This will need to be the internal keys, not the displayable name.)
