```{r}
#| include: false
#| eval: true

source('R/appdown.r')
```

# Resources

## Art Assets {-}

All art assets are stored in `r file_path(c("resources", "images"))`.
Images should be saved into the appropriate folder in SVG format (except the `r file_path(c("splash"))` folder, these are JPEGs).
SVGs should have an aspect ratio with the same width and height.

### Application Icon {-}

If the application icon (`r file_path(c("resources", "images", "ribbon", "app-logo.svg"))`) is changed, then in the root directory:

- Save a copy as "app-logo.png" (1024x1024 resolution)
- Save a copy as "app-logo.ico" (512x512 resolution)
- On macOS, run this in a terminal:

```{.bash}
mkdir app-logo.iconset
sips -z 16 16     app-logo.png --out app-logo.iconset/icon_16x16.png
sips -z 32 32     app-logo.png --out app-logo.iconset/icon_16x16@2x.png
sips -z 32 32     app-logo.png --out app-logo.iconset/icon_32x32.png
sips -z 64 64     app-logo.png --out app-logo.iconset/icon_32x32@2x.png
sips -z 128 128   app-logo.png --out app-logo.iconset/icon_128x128.png
sips -z 256 256   app-logo.png --out app-logo.iconset/icon_128x128@2x.png
sips -z 256 256   app-logo.png --out app-logo.iconset/icon_256x256.png
sips -z 512 512   app-logo.png --out app-logo.iconset/icon_256x256@2x.png
sips -z 512 512   app-logo.png --out app-logo.iconset/icon_512x512.png
cp app-logo.png app-logo.iconset/icon_512x512@2x.png
iconutil -c icns app-logo.iconset
rm -R app-logo.iconset
```

## Word Lists {-}

### Editing Lists {-}

In the `r file_path(c("resources", "words"))` folder, the following word lists are used by the program.
Some can be edited, others are generated.
Also, all these files are meant for all languages, unless otherwise noted.

Please refer to the following file & folder breakdown for reference:

- "base-english-dictionary.txt": main English dictionary. All forms of a given word (e.g., plural, possessive) should go in here. Note that proper nouns should not go in here
- "base-non-personal.txt": places (e.g., cities, countries), company names, species names, etc. should go in here
- "base-personal.txt": person names should go in there
- `r file_path(c("abbreviations"))`:
  - "abbreviations.txt": list of abbreviations that the program uses to determine abbreviations. (Words in here must include their periods.)
  - "non-abbreviations.txt": list of words that should never been seen as abbreviations. This will be long words that contain no vowels, but are still an actual word.
- `r file_path(c("articles"))`:
  - "a-exceptions.txt": these are words that are correct to follow an **a** that the program word otherwise misclassify
  - "an-exceptions.txt": these are words that are correct to follow an **an** that the program word otherwise misclassify
- `r file_path(c("citation-headers"))`:
  - "citations.txt": list of phrases that would mark the beginning of a citation section in a document
- `r file_path(c("copyright-notices"))`:
  - "notices.txt": list of phrases that would mark a copyright notice in a document
- `r file_path(c("dictionaries"))`: all files in this folder are generated, **do not edit anything in here**
- `r file_path(c("past-participles"))`:
  - "exceptions.txt": adjectives that can be mistaken for past-tense verbs.\
    These are entered as overrides that the program would see as passive voice otherwise.
- `r file_path(c("programming"))`:
  - "all-languages.txt": this file is generated, **do not edit**
  - All other files in here are keywords/function names/etc. for various programming languages.\
    These are used by the spell checker if the user is ignoring programming words.
- `r file_path(c("proper-nouns"))`: all files in this folder are generated, **do not edit anything in here**
- `r file_path(c("stop-words"))`:
  - "english.txt": common English words that should be excluded from the list of key words
  - "german.txt": common German words that should be excluded from the list of key words
  - "proper-nouns-stoplist.txt": common words that would never be proper. This is used to prevent uppercased words from being seen as proper when they really aren't.\
    (This should include stop words from all languages.)
  - "spanish.txt": common Spanish words that should be excluded from the list of key words
- `r file_path(c("word-lists"))`:
  - "dolch.txt": Dolch list of Sight Words
  - "harris-jacobson.txt": Harris-Jacobson known words
  - "new-dale-chall.txt": New Dale-Chall known words
  - "revised-spache.txt": Revised Spache known words
  - "stocker-catholic-supplement.txt": Stocker's Catholic Supplement (used with Dale-Chall)
- `r file_path(c("wordy-phrases"))`:
  - "base-english.txt": English phrases
  - "base-german.txt": German phrases
  - "base-spanish.txt": Spanish phrases
  - "common-errors.txt": Phrases for all languages
  - "dale-chall-replacements.txt": generated, **do not edit**.
  - "english.txt": generated, **do not edit**
  - "german.txt": generated, **do not edit**
  - "harris-jacobson-replacements.txt": generated, **do not edit**
  - "single-word-replacements-english.txt": generated, **do not edit**
  - "spache-replacements.txt": generated, **do not edit**
  - "spanish.txt": generated, **do not edit**

For phrase files (in the `r file_path(c("wordy-phrases"))` folder), each row should be a phrase, and the column values (tab-delimited) are:

- Phrase
- Suggestion (optional)
- Type (wordy = 0, redundant = 1, clich√© = 2, error = 3)
- Word proceeding the phrase that will override the grammar checker\
  (optional, can be multiple values delimited by **;** or **,**)
- Word following the phrase that will override the grammar checker\
  (optional, can be multiple values delimited by **;** or **,**)

### Finalizing Word Lists {-}

After making changes to a word list, run the script `r file_path(c("resources", "finalize-word-lists.lua"))` from *{{< var PROGRAM_NAME >}}*.
This will sort, merge, remove duplicates, and generate supplemental word lists.

### Translations {-}

All translation catalogs (\*.po files) are in the `r file_path(c("locale"))` folder.
After editing a catalog, compile it with a *gettext* tool (e.g., *POEdit*) into a \*.mo file.
The next time that the *CMake* build process is ran, all compiled \*.mo files will be copied into the build and installer folders.

### *Windows* Installer {-}

The *Windows* installer project is located in `r file_path(c("installers", "windows"))`.
This is an *Inno Setup* project that contains the following structure:

- "readstudio.iss": the main project file
- "setup.isl.in": variables from the *CMake* script that the installer may use (e.g., product version)
- "lang.isl": the list of translation catalogs
- `r file_path(c("messages"))`: this folder contains the translation catalogs listed in "lang.isl"
